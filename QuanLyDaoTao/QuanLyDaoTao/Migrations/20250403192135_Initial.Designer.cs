// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuanLyDaoTaoWeb.Models;

#nullable disable

namespace QuanLyDaoTao.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250403192135_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.BaiGiang", b =>
                {
                    b.Property<string>("MaBG")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaMH")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MonHocMaMH")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NoiDung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TieuDe")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MaBG");

                    b.HasIndex("MaMH");

                    b.HasIndex("MonHocMaMH");

                    b.ToTable("BaiGiang");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.ChuongTrinhDaoTao", b =>
                {
                    b.Property<string>("MaCTDT")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NamBatDau")
                        .HasColumnType("int");

                    b.Property<string>("TenCTDT")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TrangThai")
                        .HasColumnType("bit");

                    b.HasKey("MaCTDT");

                    b.HasIndex("MaKhoa");

                    b.ToTable("ChuongTrinhDaoTao");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.DangKyLopHoc", b =>
                {
                    b.Property<string>("MaSV")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaLopHoc")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayDangKy")
                        .HasColumnType("datetime2");

                    b.HasKey("MaSV", "MaLopHoc");

                    b.HasIndex("MaLopHoc");

                    b.ToTable("DangKyLopHoc");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.DanhGia", b =>
                {
                    b.Property<string>("MaDG")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DiemDanhGia")
                        .HasColumnType("int");

                    b.Property<string>("MaMH")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaSV")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MonHocMaMH")
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayDanhGia")
                        .HasColumnType("datetime2");

                    b.Property<string>("NhanXet")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SinhVienMaSV")
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MaDG");

                    b.HasIndex("MaMH");

                    b.HasIndex("MaSV");

                    b.HasIndex("MonHocMaMH");

                    b.HasIndex("SinhVienMaSV");

                    b.ToTable("DanhGia");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.DeCuong", b =>
                {
                    b.Property<string>("MaDC")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaMH")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MucTieu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("NgayCapNhat")
                        .HasColumnType("datetime2");

                    b.HasKey("MaDC");

                    b.HasIndex("MaMH");

                    b.ToTable("DeCuong");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.GiangVien", b =>
                {
                    b.Property<string>("MaGV")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgayNhanViec")
                        .HasColumnType("datetime2");

                    b.HasKey("MaGV");

                    b.HasIndex("MaKhoa");

                    b.ToTable("GiangVien");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.Khoa", b =>
                {
                    b.Property<string>("MaKhoa")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiaChi")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DienThoai")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("TenKhoa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaKhoa");

                    b.ToTable("Khoa");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.LopHoc", b =>
                {
                    b.Property<string>("MaLop")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaCTDT")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TenLop")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaLop");

                    b.HasIndex("MaCTDT");

                    b.ToTable("LopHoc");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.MonHoc", b =>
                {
                    b.Property<string>("MaMH")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SoTinChi")
                        .HasColumnType("int");

                    b.Property<string>("TenMH")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MaMH");

                    b.HasIndex("MaKhoa");

                    b.ToTable("MonHoc");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.PhanCongGiangDay", b =>
                {
                    b.Property<string>("MaPCGD")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("GiangVienMaGV")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("HocKy")
                        .HasColumnType("int");

                    b.Property<string>("LopHocMaLop")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaGV")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaLop")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MaMH")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MonHocMaMH")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NamHoc")
                        .HasColumnType("int");

                    b.HasKey("MaPCGD");

                    b.HasIndex("GiangVienMaGV");

                    b.HasIndex("LopHocMaLop");

                    b.HasIndex("MaGV");

                    b.HasIndex("MaLop");

                    b.HasIndex("MaMH");

                    b.HasIndex("MonHocMaMH");

                    b.ToTable("PhanCongGiangDay");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.SinhVien", b =>
                {
                    b.Property<string>("MaSV")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HoTen")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("NgaySinh")
                        .HasColumnType("datetime2");

                    b.HasKey("MaSV");

                    b.HasIndex("MaKhoa");

                    b.ToTable("SinhVien");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.TaiLieu", b =>
                {
                    b.Property<string>("MaTL")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DuongDan")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MaBG")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TenTL")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MaTL");

                    b.HasIndex("MaBG");

                    b.ToTable("TaiLieu");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.BaiGiang", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", "MonHoc")
                        .WithMany()
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", null)
                        .WithMany("BaiGiangs")
                        .HasForeignKey("MonHocMaMH")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MonHoc");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.ChuongTrinhDaoTao", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.Khoa", "Khoa")
                        .WithMany()
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Khoa");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.DangKyLopHoc", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.LopHoc", "LopHoc")
                        .WithMany("DangKyLopHocs")
                        .HasForeignKey("MaLopHoc")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.SinhVien", "SinhVien")
                        .WithMany("DangKyLopHocs")
                        .HasForeignKey("MaSV")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LopHoc");

                    b.Navigation("SinhVien");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.DanhGia", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", "MonHoc")
                        .WithMany()
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.SinhVien", "SinhVien")
                        .WithMany()
                        .HasForeignKey("MaSV")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", null)
                        .WithMany("DanhGias")
                        .HasForeignKey("MonHocMaMH")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuanLyDaoTaoWeb.Models.SinhVien", null)
                        .WithMany("DanhGias")
                        .HasForeignKey("SinhVienMaSV")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("MonHoc");

                    b.Navigation("SinhVien");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.DeCuong", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", "MonHoc")
                        .WithMany()
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MonHoc");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.GiangVien", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.Khoa", "Khoa")
                        .WithMany("GiangViens")
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Khoa");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.LopHoc", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.ChuongTrinhDaoTao", "ChuongTrinhDaoTao")
                        .WithMany("LopHocs")
                        .HasForeignKey("MaCTDT")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChuongTrinhDaoTao");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.MonHoc", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.Khoa", "Khoa")
                        .WithMany("MonHocs")
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Khoa");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.PhanCongGiangDay", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.GiangVien", null)
                        .WithMany("PhanCongGiangDays")
                        .HasForeignKey("GiangVienMaGV")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuanLyDaoTaoWeb.Models.LopHoc", null)
                        .WithMany("PhanCongGiangDays")
                        .HasForeignKey("LopHocMaLop")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("QuanLyDaoTaoWeb.Models.GiangVien", "GiangVien")
                        .WithMany()
                        .HasForeignKey("MaGV")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.LopHoc", "LopHoc")
                        .WithMany()
                        .HasForeignKey("MaLop")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", "MonHoc")
                        .WithMany()
                        .HasForeignKey("MaMH")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuanLyDaoTaoWeb.Models.MonHoc", null)
                        .WithMany("PhanCongGiangDays")
                        .HasForeignKey("MonHocMaMH")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GiangVien");

                    b.Navigation("LopHoc");

                    b.Navigation("MonHoc");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.SinhVien", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.Khoa", "Khoa")
                        .WithMany("SinhViens")
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Khoa");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.TaiLieu", b =>
                {
                    b.HasOne("QuanLyDaoTaoWeb.Models.BaiGiang", "BaiGiang")
                        .WithMany()
                        .HasForeignKey("MaBG")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaiGiang");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.ChuongTrinhDaoTao", b =>
                {
                    b.Navigation("LopHocs");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.GiangVien", b =>
                {
                    b.Navigation("PhanCongGiangDays");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.Khoa", b =>
                {
                    b.Navigation("GiangViens");

                    b.Navigation("MonHocs");

                    b.Navigation("SinhViens");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.LopHoc", b =>
                {
                    b.Navigation("DangKyLopHocs");

                    b.Navigation("PhanCongGiangDays");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.MonHoc", b =>
                {
                    b.Navigation("BaiGiangs");

                    b.Navigation("DanhGias");

                    b.Navigation("PhanCongGiangDays");
                });

            modelBuilder.Entity("QuanLyDaoTaoWeb.Models.SinhVien", b =>
                {
                    b.Navigation("DangKyLopHocs");

                    b.Navigation("DanhGias");
                });
#pragma warning restore 612, 618
        }
    }
}
